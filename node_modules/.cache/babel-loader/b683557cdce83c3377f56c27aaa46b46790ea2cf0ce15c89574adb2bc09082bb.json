{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"SignUpForm\",\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      password_confirm: \"\",\n      city: '',\n      street: '',\n      addressDetail: '',\n      zipcode: '',\n      emailPass: false,\n      streetPass: false,\n      email_rule: [v => !!v || '이메일을 입력해주세요.', v => {\n        const replaceV = v.replace(/(\\s*)/g, '');\n        const pattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/;\n        return pattern.test(replaceV) || '이메일 형식을 입력하세요.';\n      }],\n      password_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n      password_confirm_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.password || '패스워드가 일치하지 않습니다.']\n    };\n  },\n  methods: {\n    onSubmit() {\n      if (this.$refs.form.validate()) {\n        const {\n          email,\n          password,\n          city,\n          street,\n          addressDetail,\n          zipcode\n        } = this;\n        this.$emit(\"submit\", {\n          email,\n          password,\n          city,\n          street,\n          addressDetail,\n          zipcode\n        });\n      } else {\n        alert('올바른 정보를 입력하세요!');\n      }\n    },\n    emailValidation() {\n      const emailValid = this.email.match(/^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      if (emailValid) {\n        this.emailPass = true;\n      }\n    },\n    checkDuplicateEmail() {\n      const emailValid = this.email.match(/^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      if (emailValid) {\n        const {\n          email\n        } = this;\n        axios.post(`http://localhost:7777/member/check-email/${email}`).then(res => {\n          if (res.data) {\n            alert(\"사용 가능한 이메일입니다!\");\n            this.emailPass = true;\n          } else {\n            alert(\"중복된 이메일입니다!\");\n            this.emailPass = false;\n          }\n        });\n      }\n    },\n    callDaumAddressApi() {\n      new window.daum.Postcode({\n        oncomplete: data => {\n          let fullRoadAddr = data.roadAddress;\n          let extraRoadAddr = '';\n          if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n            extraRoadAddr += data.bname;\n          }\n          if (data.buildingName !== '' && data.apartment === 'Y') {\n            extraRoadAddr += extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName;\n          }\n          if (extraRoadAddr !== '') {\n            extraRoadAddr = ' (' + extraRoadAddr + ')';\n          }\n          if (fullRoadAddr !== '') {\n            fullRoadAddr += extraRoadAddr;\n          }\n          this.city = data.sido;\n          this.zipcode = data.zonecode;\n          this.street = data.sigungu + ' ' + fullRoadAddr;\n          this.streetPass = true;\n        }\n      }).open();\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","email","password","password_confirm","city","street","addressDetail","zipcode","emailPass","streetPass","email_rule","v","replaceV","replace","pattern","test","password_rule","state","length","password_confirm_rule","methods","onSubmit","$refs","form","validate","$emit","alert","emailValidation","emailValid","match","checkDuplicateEmail","post","then","res","callDaumAddressApi","window","daum","Postcode","oncomplete","fullRoadAddr","roadAddress","extraRoadAddr","bname","buildingName","apartment","sido","zonecode","sigungu","open"],"sources":["src/components/account/SignUpForm.vue"],"sourcesContent":["<template>\n    <div class=\"grey lighten-5\" style=\"font-family: Arial\">\n      <v-row justify=\"center\">\n        <v-col cols=\"auto\" style=\"padding-bottom: 90px\">\n          <router-link to=\"/\">\n            <v-img\n                :src=\"require('@/assets/logo.png')\" width=\"120\" class=\"mx-auto mb-6\"/>\n          </router-link>\n          <v-card width=\"460\">\n            <v-card-text class=\"text-center px-12 py-16\">\n              <v-form @submit.prevent=\"onSubmit\" ref=\"form\">\n                <div class=\"text-h4 font-weight-black mb-10\">회원 가입</div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"email\" label=\"이메일\" @change=\"emailValidation\"\n                                :rules=\"email_rule\" :disabled=\"false\" required/>\n                  <v-btn text large outlined style=\"font-size: 13px\"\n                         class=\"mt-3 ml-5\" color=\"teal lighten-1\"\n                         @click=\"checkDuplicateEmail\"\n                         :disabled=\"!emailPass\">\n                    이메일 <br/>중복 확인\n                  </v-btn>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"password\" label=\"비밀번호\" type=\"password\"\n                                :rules=\"password_rule\" :disabled=\"false\" required/>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"password_confirm\" label=\"비밀번호 확인\" type=\"password\"\n                                :rules=\"password_confirm_rule\" :disabled=\"false\" required/>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"city\" label=\"도시\" :disabled=\"true\" required/>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"street\" label=\"기본 주소\" :disabled=\"true\" required/>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"addressDetail\" label=\"상세 주소\" :disabled=\"false\" required/>\n                </div>\n  \n                <div class=\"d-flex\">\n                  <v-text-field v-model=\"zipcode\" label=\"우편번호\" :disabled=\"true\" required/>\n  \n                  <v-btn text large outlined style=\"font-size: 13px\"\n                         class=\"mt-3 ml-5\" color=\"blue lighten-1\"\n                         @click=\"callDaumAddressApi\"\n                         :disabled=\"false\">\n                    주소 확인\n                  </v-btn>\n                </div>\n  \n                <v-btn type=\"submit\" block x-large rounded\n                       class=\"mt-6\" color=\"purple lighten-1\" :disabled=\"(emailPass & streetPass) == false\">\n                  가입하기\n                </v-btn>\n  \n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n    </div>\n  </template>\n  \n  <script>\n  import axios from \"axios\";\n  \n  export default {\n    name: \"SignUpForm\",\n    data () {\n      return {\n        email: \"\",\n        password: \"\",\n        password_confirm: \"\",\n  \n        city: '',\n        street: '',\n        addressDetail: '',\n        zipcode: '',\n  \n        emailPass: false,\n        streetPass: false,\n  \n        email_rule: [\n          v => !!v || '이메일을 입력해주세요.',\n          v => {\n            const replaceV = v.replace(/(\\s*)/g, '')\n            const pattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/\n            return pattern.test(replaceV) || '이메일 형식을 입력하세요.'\n          }\n        ],\n        password_rule: [\n          v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n          v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n        ],\n        password_confirm_rule: [\n          v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n          v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n          v => v === this.password || '패스워드가 일치하지 않습니다.'\n        ],\n      }\n    },\n    methods: {\n      onSubmit () {\n        if (this.$refs.form.validate()) {\n          const { email, password, city, street, addressDetail, zipcode } = this\n          this.$emit(\"submit\", { email, password, city, street, addressDetail, zipcode })\n        } else {\n          alert('올바른 정보를 입력하세요!')\n        }\n      },\n      emailValidation () {\n        const emailValid = this.email.match(\n            /^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        );\n  \n        if (emailValid) {\n          this.emailPass = true\n        }\n      },\n      checkDuplicateEmail () {\n        const emailValid = this.email.match(\n            /^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        );\n  \n        if (emailValid) {\n          const {email} = this\n          axios.post(`http://localhost:7777/member/check-email/${email}`)\n              .then((res) => {\n                if (res.data) {\n                  alert(\"사용 가능한 이메일입니다!\")\n                  this.emailPass = true\n                } else {\n                  alert(\"중복된 이메일입니다!\")\n                  this.emailPass = false\n                }\n              })\n        }\n      },\n      callDaumAddressApi () {\n        new window.daum.Postcode({\n          oncomplete: (data) => {\n            let fullRoadAddr = data.roadAddress;\n            let extraRoadAddr = '';\n  \n            if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n              extraRoadAddr += data.bname;\n            }\n  \n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\n            }\n  \n            if (extraRoadAddr !== '') {\n              extraRoadAddr = ' (' + extraRoadAddr + ')';\n            }\n  \n            if (fullRoadAddr !== '') {\n              fullRoadAddr += extraRoadAddr;\n            }\n  \n            this.city = data.sido;\n            this.zipcode = data.zonecode;\n            this.street = data.sigungu + ' ' + fullRoadAddr;\n  \n            this.streetPass = true\n          }\n        }).open()\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  \n  </style>"],"mappings":"AAuEA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,QAAA;MACAC,gBAAA;MAEAC,IAAA;MACAC,MAAA;MACAC,aAAA;MACAC,OAAA;MAEAC,SAAA;MACAC,UAAA;MAEAC,UAAA,GACAC,CAAA,MAAAA,CAAA,oBACAA,CAAA;QACA,MAAAC,QAAA,GAAAD,CAAA,CAAAE,OAAA;QACA,MAAAC,OAAA;QACA,OAAAA,OAAA,CAAAC,IAAA,CAAAH,QAAA;MACA,EACA;MACAI,aAAA,GACAL,CAAA,SAAAM,KAAA,eAAAN,CAAA,gCACAA,CAAA,MAAAA,CAAA,IAAAA,CAAA,CAAAO,MAAA,sCACA;MACAC,qBAAA,GACAR,CAAA,SAAAM,KAAA,eAAAN,CAAA,gCACAA,CAAA,MAAAA,CAAA,IAAAA,CAAA,CAAAO,MAAA,uCACAP,CAAA,IAAAA,CAAA,UAAAT,QAAA;IAEA;EACA;EACAkB,OAAA;IACAC,SAAA;MACA,SAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA;QACA;UAAAvB,KAAA;UAAAC,QAAA;UAAAE,IAAA;UAAAC,MAAA;UAAAC,aAAA;UAAAC;QAAA;QACA,KAAAkB,KAAA;UAAAxB,KAAA;UAAAC,QAAA;UAAAE,IAAA;UAAAC,MAAA;UAAAC,aAAA;UAAAC;QAAA;MACA;QACAmB,KAAA;MACA;IACA;IACAC,gBAAA;MACA,MAAAC,UAAA,QAAA3B,KAAA,CAAA4B,KAAA,CACA,oJACA;MAEA,IAAAD,UAAA;QACA,KAAApB,SAAA;MACA;IACA;IACAsB,oBAAA;MACA,MAAAF,UAAA,QAAA3B,KAAA,CAAA4B,KAAA,CACA,oJACA;MAEA,IAAAD,UAAA;QACA;UAAA3B;QAAA;QACAH,KAAA,CAAAiC,IAAA,6CAAA9B,KAAA,IACA+B,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAjC,IAAA;YACA0B,KAAA;YACA,KAAAlB,SAAA;UACA;YACAkB,KAAA;YACA,KAAAlB,SAAA;UACA;QACA;MACA;IACA;IACA0B,mBAAA;MACA,IAAAC,MAAA,CAAAC,IAAA,CAAAC,QAAA;QACAC,UAAA,EAAAtC,IAAA;UACA,IAAAuC,YAAA,GAAAvC,IAAA,CAAAwC,WAAA;UACA,IAAAC,aAAA;UAEA,IAAAzC,IAAA,CAAA0C,KAAA,uBAAA3B,IAAA,CAAAf,IAAA,CAAA0C,KAAA;YACAD,aAAA,IAAAzC,IAAA,CAAA0C,KAAA;UACA;UAEA,IAAA1C,IAAA,CAAA2C,YAAA,WAAA3C,IAAA,CAAA4C,SAAA;YACAH,aAAA,IAAAA,aAAA,iBAAAzC,IAAA,CAAA2C,YAAA,GAAA3C,IAAA,CAAA2C,YAAA;UACA;UAEA,IAAAF,aAAA;YACAA,aAAA,UAAAA,aAAA;UACA;UAEA,IAAAF,YAAA;YACAA,YAAA,IAAAE,aAAA;UACA;UAEA,KAAArC,IAAA,GAAAJ,IAAA,CAAA6C,IAAA;UACA,KAAAtC,OAAA,GAAAP,IAAA,CAAA8C,QAAA;UACA,KAAAzC,MAAA,GAAAL,IAAA,CAAA+C,OAAA,SAAAR,YAAA;UAEA,KAAA9B,UAAA;QACA;MACA,GAAAuC,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}