{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Carousel, Slide } from 'vue-carousel';\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: 'ProductList',\n  components: {\n    Carousel,\n    Slide\n  },\n  props: {\n    products: {\n      type: Array\n    }\n  },\n  data() {\n    return {\n      cart: []\n    };\n  },\n  created() {\n    console.log('products:', this.products);\n  },\n  computed: {\n    ...mapState(['isAuthenticated']),\n    total() {\n      let sum = 0;\n      for (let item of this.cart) {\n        sum += item.price * item.quantity;\n      }\n      return sum;\n    }\n  },\n  mounted() {\n    if (localStorage.getItem('userInfo')) {\n      this.$store.state.isAuthenticated = true;\n    } else {\n      this.$store.state.isAuthenticated = false;\n    }\n  },\n  methods: {\n    addToCart(product, quantity = 1) {\n      if (!this.isAuthenticated) {\n        alert('로그인 먼저 하세용^_^');\n        this.$router.push('/sign-in');\n        return;\n      }\n      const token = JSON.parse(localStorage.getItem('userInfo')); //localStorage에 userInfo에 매핑되어있는 token을 가져옴(redis key)\n      axios.post('http://localhost:7777/cart/validate', token).then(res => {\n        if (res.data) {\n          console.log('인증된 사용자 입니다.');\n          const cartKey = `cart_${res.data}`;\n          let cart = localStorage.getItem(cartKey);\n          if (!cart) {\n            cart = [];\n          } else {\n            cart = JSON.parse(cart);\n          }\n          const existingCartItem = cart.find(item => item.product_id === product.productId);\n          if (existingCartItem) {\n            existingCartItem.quantity += quantity;\n          } else {\n            cart.push({\n              product_id: product.productId,\n              quantity\n            });\n          }\n          localStorage.setItem(cartKey, JSON.stringify(cart));\n        }\n        console.log('Cart:', cart);\n      });\n    },\n    getImagePath(imageData) {\n      console.log('imageData:', imageData);\n      return require(`@/${imageData}`);\n    }\n  }\n};","map":{"version":3,"names":["Carousel","Slide","mapState","axios","name","components","props","products","type","Array","data","cart","created","console","log","computed","total","sum","item","price","quantity","mounted","localStorage","getItem","$store","state","isAuthenticated","methods","addToCart","product","alert","$router","push","token","JSON","parse","post","then","res","cartKey","existingCartItem","find","product_id","productId","setItem","stringify","getImagePath","imageData","require"],"sources":["src/components/product/ProductList.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-row>\n      <v-col>\n        <router-link to=\"/product-register-page\">\n          <v-btn color=\"#a1887f\" outlined>상품 등록 하러가기</v-btn>\n        </router-link>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col\n        v-if=\"!products || (Array.isArray(products) && products.length === 0)\"\n      >\n        현재 등록된 상품이 없습니다!\n      </v-col>\n      <v-col\n        v-else\n        v-for=\"(product, index) in products\"\n        :key=\"product.productId\"\n        cols=\"12\"\n        sm=\"6\"\n        md=\"4\"\n      >\n        <v-card>\n          <v-img\n            :src=\"product.firstPhoto ? getImagePath(product.firstPhoto) : ''\"\n            aspect-ratio=\"1\"\n            class=\"grey lighten-2\"\n          ></v-img>\n\n          <v-card-title>{{ product.name }}</v-card-title>\n          <v-card-text>{{ product.description }}</v-card-text>\n          <v-card-subtitle>{{ product.price }}₩</v-card-subtitle>\n          <v-card-actions>\n            <v-btn small color=\"#a1887f\" @click=\"addToCart(product)\"\n              >장바구니에 담기</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col>\n        <v-card class=\"mt-5\">\n          <v-card-title>Cart</v-card-title>\n          <v-list>\n            <v-list-item v-for=\"(item, index) in cart\" :key=\"index\">\n              <v-list-item-title\n                >{{ item.name }} - Quantity: {{ item.quantity }} - Total: won{{\n                  item.price * item.quantity\n                }}</v-list-item-title\n              >\n            </v-list-item>\n          </v-list>\n          <v-card-subtitle>Total: {{ total }}won</v-card-subtitle>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { Carousel, Slide } from 'vue-carousel';\nimport { mapState } from 'vuex';\nimport axios from 'axios';\n\nexport default {\n  name: 'ProductList',\n  components: {\n    Carousel,\n    Slide,\n  },\n  props: {\n    products: {\n      type: Array,\n    },\n  },\n  data() {\n    return {\n      cart: [],\n    };\n  },\n  created() {\n    console.log('products:', this.products);\n  },\n  computed: {\n    ...mapState(['isAuthenticated']),\n\n    total() {\n      let sum = 0;\n      for (let item of this.cart) {\n        sum += item.price * item.quantity;\n      }\n      return sum;\n    },\n  },\n  mounted() {\n    if (localStorage.getItem('userInfo')) {\n      this.$store.state.isAuthenticated = true;\n    } else {\n      this.$store.state.isAuthenticated = false;\n    }\n  },\n  methods: {\n    addToCart(product, quantity = 1) {\n      if (!this.isAuthenticated) {\n        alert('로그인 먼저 하세용^_^');\n        this.$router.push('/sign-in');\n        return;\n      }\n      const token = JSON.parse(localStorage.getItem('userInfo')); //localStorage에 userInfo에 매핑되어있는 token을 가져옴(redis key)\n      axios.post('http://localhost:7777/cart/validate', token).then((res) => {\n        if (res.data) {\n          console.log('인증된 사용자 입니다.');\n          const cartKey = `cart_${res.data}`;\n          let cart = localStorage.getItem(cartKey);\n\n          if (!cart) {\n            cart = [];\n          } else {\n            cart = JSON.parse(cart);\n          }\n\n          const existingCartItem = cart.find(\n            (item) => item.product_id === product.productId\n          );\n\n          if (existingCartItem) {\n            existingCartItem.quantity += quantity;\n          } else {\n            cart.push({ product_id: product.productId, quantity });\n          }\n\n          localStorage.setItem(cartKey, JSON.stringify(cart));\n        }\n        console.log('Cart:', cart);\n\n      });\n    },\n    getImagePath(imageData) {\n      console.log('imageData:', imageData);\n      return require(`@/${imageData}`);\n    },\n  },\n};\n</script>\n\n<style>\n.shopping-mall {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.products-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n}\n.product {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 200px;\n}\n.cart-container {\n  margin-top: 50px;\n}\n</style>\n"],"mappings":";AA8DA,SAAAA,QAAA,EAAAC,KAAA;AACA,SAAAC,QAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAL,QAAA;IACAC;EACA;EACAK,KAAA;IACAC,QAAA;MACAC,IAAA,EAAAC;IACA;EACA;EACAC,KAAA;IACA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACAC,OAAA,CAAAC,GAAA,mBAAAP,QAAA;EACA;EACAQ,QAAA;IACA,GAAAb,QAAA;IAEAc,MAAA;MACA,IAAAC,GAAA;MACA,SAAAC,IAAA,SAAAP,IAAA;QACAM,GAAA,IAAAC,IAAA,CAAAC,KAAA,GAAAD,IAAA,CAAAE,QAAA;MACA;MACA,OAAAH,GAAA;IACA;EACA;EACAI,QAAA;IACA,IAAAC,YAAA,CAAAC,OAAA;MACA,KAAAC,MAAA,CAAAC,KAAA,CAAAC,eAAA;IACA;MACA,KAAAF,MAAA,CAAAC,KAAA,CAAAC,eAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAAC,OAAA,EAAAT,QAAA;MACA,UAAAM,eAAA;QACAI,KAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;QACA;MACA;MACA,MAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAb,YAAA,CAAAC,OAAA;MACApB,KAAA,CAAAiC,IAAA,wCAAAH,KAAA,EAAAI,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAA5B,IAAA;UACAG,OAAA,CAAAC,GAAA;UACA,MAAAyB,OAAA,WAAAD,GAAA,CAAA5B,IAAA;UACA,IAAAC,IAAA,GAAAW,YAAA,CAAAC,OAAA,CAAAgB,OAAA;UAEA,KAAA5B,IAAA;YACAA,IAAA;UACA;YACAA,IAAA,GAAAuB,IAAA,CAAAC,KAAA,CAAAxB,IAAA;UACA;UAEA,MAAA6B,gBAAA,GAAA7B,IAAA,CAAA8B,IAAA,CACAvB,IAAA,IAAAA,IAAA,CAAAwB,UAAA,KAAAb,OAAA,CAAAc,SAAA,CACA;UAEA,IAAAH,gBAAA;YACAA,gBAAA,CAAApB,QAAA,IAAAA,QAAA;UACA;YACAT,IAAA,CAAAqB,IAAA;cAAAU,UAAA,EAAAb,OAAA,CAAAc,SAAA;cAAAvB;YAAA;UACA;UAEAE,YAAA,CAAAsB,OAAA,CAAAL,OAAA,EAAAL,IAAA,CAAAW,SAAA,CAAAlC,IAAA;QACA;QACAE,OAAA,CAAAC,GAAA,UAAAH,IAAA;MAEA;IACA;IACAmC,aAAAC,SAAA;MACAlC,OAAA,CAAAC,GAAA,eAAAiC,SAAA;MACA,OAAAC,OAAA,MAAAD,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}