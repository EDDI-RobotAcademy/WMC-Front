{"ast":null,"code":"// Directives\nimport Intersect from '../../directives/intersect'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\nexport default function intersectable(options) {\n  return Vue.extend({\n    name: 'intersectable',\n    data: () => ({\n      isIntersecting: false\n    }),\n    mounted() {\n      Intersect.inserted(this.$el, {\n        name: 'intersect',\n        value: this.onObserve\n      }, this.$vnode);\n    },\n    destroyed() {\n      Intersect.unbind(this.$el, {\n        name: 'intersect',\n        value: this.onObserve\n      }, this.$vnode);\n    },\n    methods: {\n      onObserve(entries, observer, isIntersecting) {\n        this.isIntersecting = isIntersecting;\n        if (!isIntersecting) return;\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = this[options.onVisible[i]];\n          if (typeof callback === 'function') {\n            callback();\n            continue;\n          }\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options');\n        }\n      }\n    }\n  });\n}","map":{"version":3,"names":["Intersect","consoleWarn","Vue","intersectable","options","extend","name","data","isIntersecting","mounted","inserted","$el","value","onObserve","$vnode","destroyed","unbind","methods","entries","observer","i","length","onVisible","callback"],"sources":["../../../src/mixins/intersectable/index.ts"],"sourcesContent":["// Directives\nimport Intersect from '../../directives/intersect'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\nexport default function intersectable (options: { onVisible: string[] }) {\n  return Vue.extend({\n    name: 'intersectable',\n\n    data: () => ({\n      isIntersecting: false,\n    }),\n\n    mounted () {\n      Intersect.inserted(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      }, this.$vnode)\n    },\n\n    destroyed () {\n      Intersect.unbind(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      }, this.$vnode)\n    },\n\n    methods: {\n      onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n        this.isIntersecting = isIntersecting\n\n        if (!isIntersecting) return\n\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = (this as any)[options.onVisible[i]]\n\n          if (typeof callback === 'function') {\n            callback()\n            continue\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options')\n        }\n      },\n    },\n  })\n}\n"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,4BAAtB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,oBAA5B,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,eAAc,SAAUC,aAAVA,CAAyBC,OAAzB,EAAyD;EACrE,OAAOF,GAAG,CAACG,MAAJ,CAAW;IAChBC,IAAI,EAAE,eADU;IAGhBC,IAAI,EAAEA,CAAA,MAAO;MACXC,cAAc,EAAE;IADL,CAAP,CAHU;IAOhBC,OAAOA,CAAA;MACLT,SAAS,CAACU,QAAV,CAAmB,KAAKC,GAAxB,EAA4C;QAC1CL,IAAI,EAAE,WADoC;QAE1CM,KAAK,EAAE,KAAKC;MAF8B,CAA5C,EAGG,KAAKC,MAHR;IAID,CAZe;IAchBC,SAASA,CAAA;MACPf,SAAS,CAACgB,MAAV,CAAiB,KAAKL,GAAtB,EAA0C;QACxCL,IAAI,EAAE,WADkC;QAExCM,KAAK,EAAE,KAAKC;MAF4B,CAA1C,EAGG,KAAKC,MAHR;IAID,CAnBe;IAqBhBG,OAAO,EAAE;MACPJ,SAASA,CAAEK,OAAF,EAAwCC,QAAxC,EAAwEX,cAAxE,EAA+F;QACtG,KAAKA,cAAL,GAAsBA,cAAtB;QAEA,IAAI,CAACA,cAAL,EAAqB;QAErB,KAAK,IAAIY,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGjB,OAAO,CAACkB,SAAR,CAAkBD,MAA3C,EAAmDD,CAAC,GAAGC,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;UAClE,MAAMG,QAAQ,GAAI,KAAanB,OAAO,CAACkB,SAAR,CAAkBF,CAAlB,CAAb,CAAlB;UAEA,IAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;YAClCA,QAAQ;YACR;UACD;UAEDtB,WAAW,CAACG,OAAO,CAACkB,SAAR,CAAkBF,CAAlB,IAAuB,wFAAxB,CAAX;QACD;MACF;IAhBM;EArBO,CAAX,CAAP;AAwCD"},"metadata":{},"sourceType":"module","externalDependencies":[]}